services:
  # Elasticsearch service definition
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0 # Use the official Elasticsearch image, version 8.6.0
    container_name: elasticsearch # Name the container as 'elasticsearch'
    environment:
      - "discovery.type=single-node" # Run in single-node mode for development or testing purposes
      - "xpack.security.enabled=true" #
      - ELASTIC_PASSWORD=changeme # Set the password for the default 'elastic' user

    ulimits:
      memlock:
        soft: -1 # Disable memory locking for better performance
        hard: -1
    ports:
      - 9200:9200 # Expose port 9200 on the host for Elasticsearch API access
      - 9300:9300 #
    networks:
      - elastic-net # Connect Elasticsearch to the 'elastic-net' network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"] # Check if the cluster health is green
      interval: 60s # Perform the health check every 60 seconds
      retries: 10 # Retry the check up to 5 times before marking as unhealthy
      start_period: 180s # Wait 180 seconds before starting health checks to allow initialization
      timeout: 30s # Timeout for the health check is 10 seconds

  # Kibana service definition
  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0 # Use the official Kibana image, version 8.6.0
    container_name: kibana # Name the container as 'kibana'
    environment:
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200" # Specify the Elasticsearch URL for Kibana (HTTP)
      - ELASTICSEARCH_USERNAME=kibana_system # Use the 'kibana_system' user to connect to Elasticsearch
      - ELASTICSEARCH_PASSWORD=changeme # Password for the 'kibana_system' user
    ports:
      - 5601:5601 # Expose port 5601 on the host for accessing Kibana
    networks:
      - elastic-net # Connect Kibana to the 'elastic-net' network for Elasticsearch communication
    depends_on:
      elasticsearch:
        condition: service_healthy # Start Kibana only after Elasticsearch is healthy
    restart: on-failure # Ensures Kibana will restart on failure to connect
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"] # Check if Kibana is running and reachable
      interval: 30s # Perform the health check every 30 seconds
      retries: 5 # Retry the check up to 5 times before marking as unhealthy
      start_period: 30s # Wait 30 seconds before starting health checks
      timeout: 10s # Timeout for the health check is 10 seconds

networks:
  elastic-net:
    driver: bridge # Use a bridge network for internal container communication

# Volumes
volumes:
  elasticsearch-data:
    driver: local

# Run Services
# docker-compose up

# Check Logs
# docker-compose logs -f

# Stop and Remove
# docker-compose down
