#!/bin/bash

# Script Overview:
# This Bash script is designed to automate the setup and installation process
# for rtl_adsb, a tool that leverages an RTL-SDR (Software Defined Radio) device
# to receive and decode ADS-B (Automatic Dependent Surveillance-Broadcast) signals.
# ADS-B signals are broadcast by aircraft to provide their location, velocity,
# and other telemetry data to air traffic control systems and other aircraft.
# By using rtl_adsb, this script allows local users to capture and log ADS-B data
# from nearby aircraft in real-time, which can then be forwarded to a central server
# or analyzed for air traffic monitoring purposes.

# The script ensures that all necessary system dependencies are installed, including:
# - RTL-SDR tools: for interfacing with the RTL-SDR hardware.
# - Core utilities like curl, coreutils, and debianutils: for general-purpose tasks like downloading and system management.
# - Process management utilities (e.g., procps) for managing system processes.
# - System utilities (e.g., ps, which, cut) to check and configure the system environment.
#
# The script performs several critical functions to ensure smooth operation:
# 1. **Root Privileges Check**: The script verifies that it is being run with root privileges. This is necessary for
#    installing packages, modifying system configurations, and managing services.
#
# 2. **System Information Gathering**: It checks the operating system details (e.g., Ubuntu, Debian, Raspbian) and
#    ensures that the system is compatible with the script's requirements. The script supports common Linux distributions.
#
# 3. **System Requirements Installation**: It checks whether the required packages (such as rtl-sdr, curl, coreutils, etc.)
#    are installed. If any are missing, the script will automatically install them using the system's package manager
#    (e.g., apt-get for Debian-based systems).
#
# 4. **Disk Space Check**: Before proceeding with the installation, the script checks if there is at least 10GB of free space
#    on the system's root partition. This ensures there is enough space to store logs and data generated by rtl_adsb.
#
# 5. **Init System Compatibility Check**: The script verifies that the system is using a compatible init system (e.g., systemd,
#    sysvinit, upstart). This is important because the script will create a service file to run rtl_adsb as a background service,
#    and different init systems require different service management commands.
#
# 6. **Service File Creation**: The script creates a systemd (or equivalent) service file for rtl_adsb. The service is configured
#    to run rtl_adsb as a background process, ensuring that the tool starts automatically on boot and continues running even
#    after system restarts. The script will also set up proper file permissions and log management for the service.
#
# 7. **Service Management**: After creating the service file, the script reloads the systemâ€™s service manager (e.g., systemd)
#    and starts the rtl_adsb service. It ensures the service is enabled to start on boot and is immediately started to begin
#    collecting ADS-B data from nearby aircraft.
#
# Key Features:
# - **Compatibility**: The script supports a range of Linux distributions (Ubuntu, Debian, Raspbian) and init systems (systemd,
#   sysvinit, upstart).
# - **Automatic Installation**: The script handles the installation of all necessary software dependencies automatically,
#   simplifying the setup process.
# - **Log Management**: The script configures logging for rtl_adsb, storing both regular output and error logs in dedicated files.
# - **Background Service**: rtl_adsb is set up as a background service that runs automatically upon boot, ensuring continuous
#   operation without user intervention.
# - **Customizability**: The script provides flexibility in terms of paths and configuration (e.g., API key, log file locations).
#
# The goal of this script is to make the setup of rtl_adsb as straightforward as possible, automating as many tasks as possible
# to minimize user error and simplify the process of collecting ADS-B data for aviation enthusiasts, researchers, or others
# who need to track nearby aircraft.

# This script is ideal for users who are setting up an RTL-SDR-based ADS-B receiver for the first time, as well as for
# experienced users who want an automated, hassle-free installation process.

# Function to check if the script is run as root
function check_root() {
    # The script must be run as root because certain operations, like installing packages,
    # modifying system files, and managing services, require elevated privileges.
    if [ "$(id -u)" -ne 0 ]; then
        # If the user is not root, print an error message.
        echo "Error: This script must be run as root."
        # Exit the script immediately with a failure code.
        exit
    fi
}

# Call the check_root function to ensure the script has root privileges.
check_root

# Function to gather system details like the distribution ID.
# This helps ensure compatibility with the script and adjust package installations as needed.
function system_information() {
    # Check if the system has the /etc/os-release file, which contains details about the OS.
    if [ -f /etc/os-release ]; then
        # Source the /etc/os-release file to load the system's distribution information.
        # shellcheck source=/dev/null
        source /etc/os-release
        # Store the distribution ID (e.g., ubuntu, debian, etc.) in the variable CURRENT_DISTRO.
        CURRENT_DISTRO=${ID}
    fi
}

# Call the system_information function to determine the distribution of the system.
system_information

# Function to check if all required packages are installed.
# If any required package is missing, it will install them based on the detected distribution.
function installing_system_requirements() {
    # Check if the current Linux distribution is one of the supported ones: Ubuntu, Debian, or Raspbian.
    if { [ "${CURRENT_DISTRO}" == "ubuntu" ] || [ "${CURRENT_DISTRO}" == "debian" ] || [ "${CURRENT_DISTRO}" == "raspbian" ]; }; then
        # Check if any required command (curl, rtl_test, rtl_adsb, etc.) is not installed.
        if { [ ! -x "$(command -v curl)" ] || [ ! -x "$(command -v cut)" ] || [ ! -x "$(command -v rtl_test)" ] || [ ! -x "$(command -v rtl_adsb)" ] || [ ! -x "$(command -v ps)" ] || [ ! -x "$(command -v which)" ]; }; then
            # Update the system's package list to ensure we get the latest versions of packages.
            apt-get update
            # Install the necessary packages: curl (for downloading files), coreutils (basic Unix utilities),
            # rtl-sdr (for handling RTL-SDR devices), procps (for managing system processes), debianutils.
            apt-get install curl coreutils rtl-sdr procps debianutils -y
        fi
    else
        # If the system is running an unsupported distribution, print an error message.
        echo "Error: Your current distribution ${CURRENT_DISTRO} is not supported by this script. Please consider updating your distribution or using a supported one."
        # Exit the script if the distribution is not supported.
        exit
    fi
}

# Call the installing_system_requirements function to ensure required packages are installed.
installing_system_requirements

# Function to check if the system has enough disk space.
# The script requires at least 10 GB of free space to proceed.
function check_disk_space() {
    # Check the available free space on the root partition (in megabytes).
    FREE_SPACE_ON_DRIVE_IN_MB=$(df -m / | tr --squeeze-repeats " " | tail -n1 | cut --delimiter=" " --fields=4)
    # If the free space is less than or equal to 10 GB (10240 MB), print an error and exit.
    if [ "${FREE_SPACE_ON_DRIVE_IN_MB}" -le 10240 ]; then
        # Display a message indicating insufficient disk space.
        echo "Error: You need more than 10 GB of free space to install everything. Please free up some space and try again."
        # Exit the script due to insufficient space.
        exit
    fi
}

# Call the check_disk_space function to ensure there is enough space for installation.
check_disk_space

# Function to check the system's init system (e.g., systemd, sysvinit, etc.).
# The script ensures that only supported init systems are used to manage services.
function check_current_init_system() {
    # Determine the init system used on the current machine (PID 1 holds the init process).
    CURRENT_INIT_SYSTEM=$(ps -p 1 -o comm= | awk -F'/' '{print $NF}')
    # Convert the init system name to lowercase to ensure case-insensitive comparison.
    CURRENT_INIT_SYSTEM=$(echo "$CURRENT_INIT_SYSTEM" | tr '[:upper:]' '[:lower:]')
    # Print the detected init system for debugging purposes (optional).
    echo "Detected init system: ${CURRENT_INIT_SYSTEM}"
    # List of allowed init systems for compatibility: systemd, sysvinit, init, upstart, bash, sh.
    ALLOWED_INIT_SYSTEMS=("systemd" "sysvinit" "init" "upstart" "bash" "sh")
    # Check if the current init system is in the list of allowed systems.
    if [[ ! "${ALLOWED_INIT_SYSTEMS[*]}" =~ ${CURRENT_INIT_SYSTEM} ]]; then
        # If the init system is not supported, display an error and exit.
        echo "Error: The '${CURRENT_INIT_SYSTEM}' initialization system is not supported. Please stay tuned for future updates."
        # Exit the script due to unsupported init system.
        exit
    fi
}

# Call the check_current_init_system function to ensure the init system is compatible.
check_current_init_system

# Create a service file for the rtl_adsb service
function create_rtl_adsb_service() {
    # Define global variables for the configuration and paths used in the script
    API_KEY="jHut8FuCwo"                                                         # API Key used for authentication or identification purposes
    ADSB_DIRECTORY_PATH="/etc/rtl_adsb"                                          # Directory path where the rtl_adsb service will store its log files
    ADSB_LOCAL_LOG_FILE="${ADSB_DIRECTORY_PATH}/adsb_${API_KEY}.log"             # Path to the log file where the rtl_adsb service will record its operational logs
    ADSB_LOCAL_ERROR_LOG_FILE="${ADSB_DIRECTORY_PATH}/adsb_error_${API_KEY}.err" # Path to the log file where the rtl_adsb service will record any error logs
    ADSB_LOCAL_SERVICE_FILE_PATH="/etc/systemd/system/rtl_adsb.service"          # Path to the systemd service configuration file for the rtl_adsb service
    LOCAL_DATE_PATH=$(which date)                                                # Path to the `date` binary, used to generate date-related information in the script
    LOCAL_RTL_ADSB_PATH=$(which rtl_adsb)                                        # Path to the `rtl_adsb` binary, used to interact with RTL-SDR for ADS-B data collection
    LOCAL_MKDIR_PATH=$(which mkdir)                                              # Path to the `mkdir` binary, used for creating directories if needed
    LOCAL_CHOWN_PATH=$(which chown)                                              # Path to the `chown` binary, used for changing file ownerships when needed
    LOCAL_CHMOD_PATH=$(which chmod)                                              # Path to the `chmod` binary, used for adjusting file permissions if required
    # Check if the rtl_adsb service file exists
    if [ -f "${ADSB_LOCAL_SERVICE_FILE_PATH}" ]; then
        rm -f "${ADSB_LOCAL_SERVICE_FILE_PATH}" # Remove the existing rtl_adsb service file
    fi
    # Create a service file for the rtl_adsb service
    echo "[Unit]
Description=RTL-ADSB Logging Service
After=network.target

[Service]
ExecStartPre=${LOCAL_MKDIR_PATH} -p ${ADSB_DIRECTORY_PATH}
ExecStartPre=${LOCAL_CHOWN_PATH} root:root ${ADSB_DIRECTORY_PATH}
ExecStartPre=${LOCAL_CHMOD_PATH} 755 ${ADSB_DIRECTORY_PATH}

ExecStart=${LOCAL_RTL_ADSB_PATH}

StandardOutput=append:${ADSB_LOCAL_LOG_FILE}
StandardError=append:${ADSB_LOCAL_ERROR_LOG_FILE}

Restart=always
RestartSec=5

TimeoutStartSec=30
TimeoutStopSec=30

User=root
Group=root

WorkingDirectory=${ADSB_DIRECTORY_PATH}

[Install]
WantedBy=multi-user.target" >>${ADSB_LOCAL_SERVICE_FILE_PATH}
    # Reload the systemd manager configuration
    systemctl daemon-reload
    # Manage the service based on the init system
    if [[ "${CURRENT_INIT_SYSTEM}" == "systemd" ]]; then
        systemctl enable rtl_adsb
        systemctl start rtl_adsb
    elif [[ "${CURRENT_INIT_SYSTEM}" == "sysvinit" ]] || [[ "${CURRENT_INIT_SYSTEM}" == "init" ]] || [[ "${CURRENT_INIT_SYSTEM}" == "upstart" ]]; then
        service rtl_adsb start
    fi
}

# Call the function to create the rtl_adsb service file
create_rtl_adsb_service
